
Order.js
Реализуйте и экспортируйте по умолчанию тип Order. Сделайте так чтобы на каждое изменение состояния в массив history добавлялась
запись об этом в виде { state: <name>, createdAt: new Date() }. Используйте для этого событие onEnterState библиотеки 
javascript-state-machine.
(Эта библиотека неявно проставляет состояние 'none' и делает переход в начальный стейт (в нашем случае -'init'). 
Нас эти состояния не интересуют, поэтому в 'history' их нужно избегать.)
Реализуйте конечный автомат процесса заказа товаров в магазине:
Начальное состояние: init. Событие accept переводит автомат в pending (только из init). 
Событие ship переводит в состояние shipped (только из pending). 
Событие complete переводит в состояние completed (только из shipped). 
Событие cancel переводит в состояние canceled (только из состояний init и pending) Событие refund переводит в состояние refunded (только из состояний shipped и completed)
Немного пояснения. Отменить заказ можно только до тех пор пока он не был отправлен клиенту. Если заказ уже был отправлен или доставлен, то клиент может сделать возврат. В реальной жизни на эти переходы будут происходить дополнительные действия связанные с обработкой платежа, отправки почты и тому подобное.

solution.js
Реализуйте обработчик (функцию) cancel который генерирует на автомате аналогичные события в случае если их возможно применить.
Это задание подразумевает то, что хорошо изучите документацию библиотеки. Все как в реальной жизни ;)

Подсказки
State Machine Factory

npm install --save-dev javascript-state-machine